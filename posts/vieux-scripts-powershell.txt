.. link: 
.. description: 
.. tags: powershell, AD, dhcp, impression
.. date: 2013/09/25 20:45:09
.. title: Vieux scripts Powershell
.. slug: vieux-scripts-powershell
.. tribe: powershell


.. class:: alert alert-info

Collection de scripts qui ont fait le boulot mais dont l'approche est probablement dépassée...


* Mais j'avais quand même envie de les garder sous le coude...

.. TEASER_END

Lister les machines d'un domaine
--------------------------------

.. code:: powershell

	$filtre = "(objectCategory=Computer)"
	$domaine = New-Object System.DirectoryServices.DirectoryEntry
	$chercheur = New-Object System.DirectoryServices.DirectorySearcher
	$chercheur.SearchRoot = $domaine
	$chercheur.PageSize = 1000
	$chercheur.Filter = $filtre

	# Ajout de la propriété que l'on recherche...
	$prop = "name"
	foreach ($i in $prop){$chercheur.PropertiesToLoad.Add($i)}

	$colResults = $chercheur.FindAll()

	foreach ($objResult in $colResults) {
	$objItem = $objResult.Properties
	# Sortie vers l'écran
	write-host $objItem.name
	}


Ping v1
-------

.. code:: powershell

	$ping = new-object System.Net.Networkinformation.Ping
	$ping.send("[nom du serveur]")
	

Ping v2
-------

.. code:: powershell
	
	$ping.send(« [nm du serveur]« ).status
	
	
Ping d'une plage d'IP
---------------------

.. code:: powershell
	
	$ping = new-object system.net.networkinformation.ping ; 10..20 | foreach { $ip = "XXX.XXX.$_.XXX" ; $ping.send($ip) } |select Address, Status



Nslookup d'une plage d'IP
-------------------------

.. code:: powershell
	
	1..255 | % { [System.Net.Dns]::GetHostByAddress("XXX.XXX.XXX.$_") } 2> Out-Null | ft


Rajout d’une plage d’exclusion DHCP pour chaque scope DHCP
----------------------------------------------------------

* Attention, deux serveurs dhcp...
* Rediriger la sortie vers un .bat

.. code:: powershell
	
	$scopes=@(101,103,104,111,112,113,114,121,122,123,124,131,132,133,134,141,142,143,144,151,152,153,154)
	foreach ($scope in $scopes){1..2 | % {"netsh dhcp server \\[ServeurDHCP]$_ scope XXX.$scope.0.0 add excluderange XXX.$scope.2.0 XXX.$scope.2.0"}}


Ping des controleurs de domaine
-------------------------------

.. code:: powershell

	$ping = new-object System.Net.Networkinformation.Ping
	$objDomain = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()  
	$dc=$objDomain.FindAllDomainControllers() | Select-Object Name,IpAddress |sort name
	for ($i=0; $i -le $dc.count-1 ;$i++) {
		Write-Host -ForegroundColor "white" $dc[$i].name -NoNewLine " - IP-> "    
		if ($ping.send($dc[$i].name).status -eq "success" )  
		{ Write-Host -ForegroundColor "green" -NoNewLine $dc[$i].ipaddress}  
		else  
		{ Write-Host -ForegroundColor "red" -NoNewLine $dc[$i].ipaddress}  
		Write-Host -ForegroundColor "white" -NoNewLine " - R-> "
		if ($dc[$i].name.substring(0,2) -eq "cm")
		{$ip=$dc[$i].Ipaddress.substring(0,$dc[$i].Ipaddress.length -3) + "XXX";    #<- à modifier pour votre pattern à vous
			if ($ping.send($ip).status -eq "success" )  
			{ Write-Host -ForegroundColor "green" $ip}  
			else  
			{ Write-Host -ForegroundColor "red" $ip}
		}
		else
		{
		$Config = Get-Wmiobject win32_NetworkAdapterConfiguration -comp $dc[$i].name
		for ($j=0; $j -le $config.count -1;$j++) {
			if ($config[$j].IPAddress -ne $null ){  
				if ($ping.send($config[$j].DefaultIPGateway).status -eq "success" )  
				{ Write-Host -ForegroundColor "green" $config[$j].DefaultIPGateway}  
				else  
				{ Write-Host -ForegroundColor "red" $config[$j].DefaultIPGateway}
			}
		}
		}
	}


Accès à une clé de Registre
---------------------------

.. code:: powershell
	
	$key= get-item "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\"


Accès à une propriété d’une clé de Registre
-------------------------------------------

.. code:: powershell

	$key= get-item "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\"
	$val= get-itemProperty $key.PSPath |select ProductName	
	
	
Création unitaire d’une file d’impression
-----------------------------------------

.. code:: powershell

	$Name="IMP-machintruc"
	$Comment="Patati..."
	$Emplacement="Bureau XXX"
	$DriverName = "Lexmark Universal XL" #<== Tres important !!
	$IPAddress = "192.168.XXX.XXX"
	$PortName = "Port-IPXXX"
 
	# creation du port
	$ClassIPPrnPort= [wmiclass]'Win32_TCPIPPrinterPort'
	$NewPort= $ClassIPPrnPort.CreateInstance()    
	$NewPort.HostAddress = $IPAddress
	$NewPort.Name = $PortName
	$NewPort.Protocol = 1 #  1 = Raw, 2 = LPR
	$NewPort.SNMPEnabled = $false
	$ResultPort=$NewPort.Put()
 
	# ajout de la file
	$ClassPrinter= [wmiclass]'Win32_Printer'
	$NewPrinter= $ClassPrinter.CreateInstance()
	$NewPrinter.DriverName = $DriverName
	$NewPrinter.DeviceID = $Name
	$NewPrinter.PortName = $PortName
	$newprinter.Shared = $true
	$newprinter.Published = $true
	$newprinter.Sharename = $Name
	$newprinter.Location = $Emplacement
	$newprinter.Comment = $Comment
 
	$ResultPrinter=$NewPrinter.Put()	
	

Liste des services arrêtés d’une machine distante
-------------------------------------------------

.. code:: powershell

	get-service -computername "ordXXXX" | where {$_.status -eq "stopped" }
	
	
Parcours d’un tableau, concaténation et transtypage
---------------------------------------------------

.. code:: powershell

	$var=0..4;$result="";$result=@() ; foreach ($val in $var) {$result+=[int]([string]$val + "01");}

